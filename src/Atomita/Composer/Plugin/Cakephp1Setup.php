<?php

namespace \Atomita\Composer\Plugin;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\Script\ScriptEvents;
use Composer\Script\Event as ScriptEvent;
use Composer\Util\Filesystem;

class Cakephp1Setup implements PluginInterface, EventSubscriberInterface {

	protected $composer;
	protected $io;

	public function activate(Composer $composer, IOInterface $io) {
		$this->composer	 = $composer;
		$this->io		 = $io;
	}

	public static function getSubscribedEvents() {
		return array(
			ScriptEvents::POST_INSTALL_CMD => array(
				array('onPostInstallCommand', 0)
			),
		);
	}

	public function onPostInstallCommand(ScriptEvent $event) {
		$config = $event->getComposer()->getConfig();

		$filesystem	 = new Filesystem();
		$vendor_path = $filesystem->normalizePath(realpath($config->get('vendor-dir')));
		$cake_dir	 = $filesystem->normalizePath($vendor_path . '/cakephp/cakephp');
		$root_dir	 = $filesystem->normalizePath(realpath(""));
		$app_dir	 = $filesystem->normalizePath($root_dir . '/app');

		if (!is_dir($app_dir)) {
			$this->copyRecursive($filesystem->normalizePath($cake_dir . '/app'), $app_dir);

			$index_path	 = $filesystem->normalizePath($app_dir . '/webroot/index.php');
			$index		 = str_replace('define(\'CAKE_CORE_INCLUDE_PATH\', ROOT);'
					, 'define(\'CAKE_CORE_INCLUDE_PATH\', ROOT . \'vendor\' . DS . \'cakephp\' . DS . \'cakephp\');'
					, file_get_contents($index_path));

			file_put_contents($index_path, $index);


			$loader_of_old_php_path = $filesystem->normalizePath($vendor_path . '/atomita/loader-of-less-than-php5.3-plugin');
			if (file_exists($loader_of_old_php_path)) {
				$loader = <<<EOD
// @generated by atomita/cakephp1-setup-plugin
include(ROOT . DS . '{$config->get('vendor-dir')}' . DS . 'autoload.php');
// @end generated
EOD;

				$config_path = $filesystem->normalizePath($app_dir . '/config/core.php');
				$config		 = file_get_contents($config_path);

				if (false === strpos($config, $loader)) {
					file_put_contents($config_path, $config . PHP_EOL . PHP_EOL . $loader);
				}
			}
		}
	}

	private function copyRecursive($src, $dst) {
		if (is_dir($src)) {
			mkdir($dst);
			foreach (scandir($src) as $file) {
				if (($file !== ".") && ($file !== "..")) {
					$this->copyRecursive("$src/$file", "$dst/$file");
				}
			}
		}
		else if (file_exists($src)) {
			copy($src, $dst);
		}
	}

}
